import java.util.*;

public class App {
    public static void main(String[] args) throws Exception {
       

        // int[][] arr = 
        //     {{0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,},
        //     {0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,},
        //     {0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,},
        //     {1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,},
        //     {0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,},
        //     {0,0,0,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,},
        //     {0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,},
        //     {0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,},
        //     {1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,},
        //     {0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,},
        //     {0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,},
        //     {0,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,},
        //     {0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,},
        //     {1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,1,0,0,0,1,1,0,0,0,1,},
        //     {0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,},
        //     {0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,1,0,},
        //     {0,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,},
        //     {0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,1,0,0,0,},
        //     {1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,},
        //     {0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,1,},
        //     {0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,},
        //     {0,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,},
        //     {0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,},
        //     {1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,},
        //     {0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,},
        //     {0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,1,0,0,},
        //     };

        int[][] arr= {{0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,},
        {0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,},
        {0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,},
        {1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,},
        {0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,},
        {0,0,0,1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,},
        {0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,},
        {0,1,0,0,0,1,1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,},
        {1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,},
        {0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,},
        {0,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,},
        {0,1,1,1,0,0,0,1,0,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,},
        {0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,},
        {1,1,0,0,0,1,0,0,0,1,1,1,0,0,1,1,1,0,0,1,1,1,0,0,1,1,},
        {0,0,0,1,1,1,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,},
        {0,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,1,1,1,0,0,1,1,1,0,},
        {0,1,1,1,0,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,},
        {0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,1,1,0,0,0,1,1,1,0,0,1,},
        {1,1,0,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,1,0,0,0,0,1,},
        {0,0,0,1,1,1,0,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,1,1,1,},
        {0,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,},
        {0,1,1,1,0,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,1,1,0,0,},
        {0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,0,},
        {1,1,0,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,1,1,1,0,0,1,1,},
        {0,0,0,1,1,1,0,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,1,0,0,},
        {0,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,0,1,1,1,0,0,0,1,0,0,},
        };

        
        
        k_core_network (arr,8); 
        

    }
    

    // To find the adjacent node count
    public static int[] find_adjacent_nodes (int[][] adjacency_matrix){
         
        int[] node_data =new int[26];

        for(int i=0;i<adjacency_matrix.length;i++){
            int count=0;

            for(int j=0;j<adjacency_matrix.length;j++){

                if(adjacency_matrix[i][j]==1){
                    count++;
                }
            }
            node_data[i]= count;

        }
        return node_data;
    }
    

    public static void k_core_network (int[][] adjacency_matrix, int k){
        System.out.println("The value of k is "+ k);
        List<Integer> deleted_nodes = new ArrayList<>(); 
        int n= -1;
        // To check if all the nodes have value greater than k else add to remove list
        while(isEmpty(adjacency_matrix)==1){
            int[] adjacentnodes = find_adjacent_nodes(adjacency_matrix);
             n=deleted_nodes.size();
            for(int j=0;j<adjacentnodes.length;j++){
                //check for nodes
                if(adjacentnodes[j]<k && adjacentnodes[j]>0){
                    System.out.println("deleted node "+j);
                    deleted_nodes.add(adjacentnodes[j]+1);
                    remove_node(adjacency_matrix, j);

                }
            }
            System.out.println("The size of deleted nodes:"+deleted_nodes.size());
            if(n == deleted_nodes.size()){
                
            break;
            }
            
            
        }

        
        if(isEmpty(adjacency_matrix)==0) {
            System.out.println("The List is empty");
        }
        
        else{
            if(deleted_nodes.size()==0){
                System.out.println("All nodes are greater than this core");
            }
    
        }
        
    }
     
    // 0---> empty
    //1---->not empty

    public static int isEmpty (int[][] adjacency_matrix){

        for(int i=0;i<adjacency_matrix.length;i++){
            for(int j=0;j<adjacency_matrix.length;j++){
                if(adjacency_matrix[i][j]==1){
                    return 1;
                }
            }
        }
        return 0;

    }

    public static void remove_node(int[][] adjacency_matrix, int index){
        int node =index;
        for(int j=0;j<adjacency_matrix.length;j++){
            adjacency_matrix[node][j]=0;
            adjacency_matrix[j][node]=0;
        }
    }
   
}
